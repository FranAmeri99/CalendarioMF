generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String
  password     String
  role         String        @default("USER")
  avatar       String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
  meetingRoomBookings MeetingRoomBooking[]
  userTeams    UserTeam[]    // Nueva relación muchos a muchos
  team         Team?         @relation(fields: [teamId], references: [id])
  teamId       String?       // Mantener para compatibilidad con reservas existentes
  teamsAsLeader Team[]       @relation("TeamLeader")
  teamsAsUser  Team[]        @relation("TeamUsers")

  @@map("users")
}

model Team {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?
  attendanceDay Int?         // 0=Lunes, 1=Martes, 2=Miércoles, 3=Jueves, 4=Viernes, 5=Sábado, 6=Domingo
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  leaderId     String?
  reservations Reservation[]
  leader       User?         @relation("TeamLeader", fields: [leaderId], references: [id])
  userTeams    UserTeam[]    // Nueva relación muchos a muchos
  users        User[]        @relation("TeamUsers") // Relación opuesta para teamId
  mainUsers    User[]        // Relación opuesta para teamId (compatibilidad)

  @@map("teams")
}

// Nueva tabla intermedia para relación muchos a muchos entre User y Team
model UserTeam {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("user_teams")
}

model Reservation {
  id        String   @id @default(cuid())
  date      DateTime
  userId    String
  teamId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team?    @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([date, userId])
  @@map("reservations")
}

model SystemConfig {
  id                             String   @id @default(cuid())
  name                           String   @unique
  maxSpotsPerDay                 Int      @default(12)
  allowWeekendReservations       Boolean  @default(false)
  allowHolidayReservations       Boolean  @default(false)
  maxAdvanceBookingDays          Int      @default(30)
  minAdvanceBookingHours         Int      @default(2)
  autoCancelInactiveReservations Boolean  @default(true)
  inactiveReservationHours       Int      @default(24)
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  @@map("system_config")
}

model MeetingRoom {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  capacity    Int      @default(10)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    MeetingRoomBooking[]

  @@map("meeting_rooms")
}

model MeetingRoomBooking {
  id            String      @id @default(cuid())
  title         String
  description  String?
  startTime     DateTime
  endTime       DateTime
  userId        String
  meetingRoomId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  meetingRoom   MeetingRoom @relation(fields: [meetingRoomId], references: [id], onDelete: Cascade)

  @@map("meeting_room_bookings")
}
